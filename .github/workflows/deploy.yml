name: Deploy

on:
  pull_request:
    branches:
    - main
    - develop
  push:
    branches:
      - main
      - develop

jobs:
  deploy-BTS:
    name: deploy-BTS
    runs-on: ubuntu-latest
    env:
      working-directory: ./
      image-name: bts
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_KEY: ${{ secrets.EC2_KEY }}
      EC2_HOST: ${{ secrets.EC2_HOST} }
      COMPOSE_FILE_PATH: "/"
          
    steps:
    # 체크아웃
    - name: Checkout Source
      uses: actions/checkout@v4
      
    # 시간대 설정
    - name: Setup timezone
      uses: zcong1993/setup-timezone@v2.0.0
      with:
        timezone: Asia/Seoul
      
    # 자바 17 환경설정
    - name: Setup Java17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'zulu'
    
    # Gradle 실행권한 부여
    - name: Grant execute permission to gradlew
      run: chmod +x ./gradlew
      working-directory: ${{ env.working-directory }}

    # Spring boot application 테스트 실행
    - name: Test with gradle
      run: ./gradlew test
      working-directory: ${{ env.working-directory }}
      
      # Spring boot application 빌드
    - name: Build with gradle
      run: ./gradlew clean build
      working-directory: ${{ env.working-directory }}

    # docker hub 로그인
    - name: Login docker hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # 빌드 매트릭스 생성
    - name: docker build matrix
      run: docker buildx create --name multi_arch_builder --platform linux/arm64,linux/amd64,linux/amd64/v2,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6 --use
      working-directory: ${{ env.working-directory }}
       
    # 빌드 에이전트 설정, 빌드 수행 준비
    - name: docker agent config
      run: docker buildx inspect --bootstrap
      working-directory: ${{ env.working-directory }}
  
    # 빌드 및 푸시
    - name: docker build and push
      run: docker buildx build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image-name }} --platform=linux/arm64,linux/amd64 --push -f Dockerfile .
      working-directory: ${{ env.working-directory }}

    # SSH 클라이언트 다운
    - name: Install SSH client
      run: sudo apt-get install -y openssh-client
      
    # 컴포즈 파일 업로드
    - name: Upload Docker Compose file to EC2
      run: scp -i ${{ secrets.EC2_KEY }} -o StrictHostKeyChecking=no ${{ env.working-directory }}/docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:${{ env.COMPOSE_FILE_PATH }}
    
    # EC2에 배포
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          cd ${{ env.COMPOSE_FILE_PATH }}
          docker-compose pull
          docker-compose up -d 
